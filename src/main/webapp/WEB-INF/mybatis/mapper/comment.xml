<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jotte.comment.dao.ICommentDAO">
    <resultMap id="commentHierarchyMap" type="com.jotte.comment.vo.CommentVO">
        <id property="postUuid" column="POST_UUID"/>
        <id property="userUuid" column="USER_UUID"/>
        <id property="commentUuid" column="COMMENT_UUID"/>
        <id property="commentContent" column="COMMENT_CONTENT"/>
        <id property="commentTimestamp" column="COMMENT_TIMESTAMP"/>
        <id property="commentUpdateTimestamp" column="COMMENT_UPDATE_TIMESTAMP"/>
        <id property="commentDeleteYn" column="COMMENT_DELETE_YN"/>
        <id property="commentParentUuid" column="COMMENT_PARENT_UUID"/>
        <id property="commentUserLikeStatus" column="COMMENT_USER_LIKE_STATUS"/>
        <collection property="user" ofType="com.jotte.user.vo.UserVO"
                    select="userCollection" column="USER_UUID"/>
        <collection property="post" ofType="com.jotte.post.vo.PostVO"
                    select="postCollection" column="POST_UUID"/>
        <collection property="board" ofType="com.jotte.board.vo.BoardVO"
                    select="boardCollection" column="POST_UUID"/>
        <collection property="child" ofType="com.jotte.comment.vo.CommentVO"
                    select="commentCollection" column="COMMENT_UUID"/>
    </resultMap>

    <select id="userCollection" parameterType="String" resultType="com.jotte.user.vo.UserVO">
        SELECT USER_UUID,
               USER_NICKNAME
        FROM "USER"
        WHERE USER_UUID = #{userUuid}
    </select>

    <select id="postCollection" parameterType="String" resultType="com.jotte.post.vo.PostVO">
        SELECT POST_UUID,
               POST_TITLE,
               POST_TAB,
               BOARD_ID
        FROM BOARD_POST
        WHERE POST_UUID = #{postUuid}
    </select>

    <select id="boardCollection" parameterType="String" resultType="com.jotte.board.vo.BoardVO">
        SELECT BOARD_ID,
               BOARD_NAME
        FROM BOARD
        WHERE BOARD_ID = (SELECT BOARD_ID
                          FROM BOARD_POST
                          WHERE POST_UUID = #{postUuid})
    </select>

    <select id="commentCollection" resultMap="commentHierarchyMap">
        SELECT c.*,
               (
                   SELECT SUM(DECODE(LIKE_TYPE, 'LIKE', 1, -1)) AS LIKE_SUM
                   FROM BOARD_LIKE
                   WHERE TARGET_UUID = c.COMMENT_UUID
               ) AS COMMENT_LIKE_COUNT
        FROM BOARD_COMMENT c
        WHERE COMMENT_PARENT_UUID = #{commentParentUuid}
        ORDER BY COMMENT_TIMESTAMP
    </select>

    <select id="getCommentList" parameterType="com.jotte.common.vo.SearchVO" resultMap="commentHierarchyMap">
        SELECT * FROM (
        SELECT a.*, ROWNUM as RNUM FROM (

        SELECT c.*,
        u.USER_NICKNAME
        FROM BOARD_COMMENT c,
        "USER" u
        WHERE c.USER_UUID = u.USER_UUID(+)
        <if test="keyword != null and keyword != ''">
            <if test="type == 'writer'">
                AND LOWER(USER_NICKNAME) LIKE '%'||LOWER(#{keyword})||'%'
            </if>
            <if test="type == 'title'">
                AND LOWER(COMMENT_CONTENT_TEXT) LIKE '%'||LOWER(#{keyword})||'%'
            </if>
        </if>
        ORDER BY c.COMMENT_TIMESTAMP DESC

        )a ) b WHERE RNUM BETWEEN #{firstRow} AND #{lastRow}
    </select>

    <select id="getCommentCount" parameterType="com.jotte.common.vo.SearchVO" resultType="int">
        SELECT COUNT(*)
        FROM BOARD_COMMENT c, "USER" u
        WHERE c.USER_UUID = u.USER_UUID(+)
        <if test="keyword != null and keyword != ''">
            <if test="type == 'writer'">
                AND LOWER(USER_NICKNAME) LIKE '%'||LOWER(#{keyword})||'%'
            </if>
            <if test="type == 'title'">
                AND LOWER(COMMENT_CONTENT_TEXT) LIKE '%'||LOWER(#{keyword})||'%'
            </if>
        </if>
    </select>

    <insert id="insertComment">
        INSERT INTO BOARD_COMMENT
        (POST_UUID,
         USER_UUID,
         COMMENT_UUID,
         COMMENT_CONTENT,
         COMMENT_CONTENT_TEXT,
         COMMENT_TIMESTAMP,
         COMMENT_PARENT_UUID,
         COMMENT_DELETE_YN)
        VALUES (#{postUuid},
                #{userUuid},
                #{commentUuid},
                #{commentContent},
                #{commentContentText},
                SYSTIMESTAMP,
                #{commentParentUuid},
                'N')
    </insert>

    <update id="updateComment">
        UPDATE BOARD_COMMENT
        SET COMMENT_CONTENT          = #{commentContent},
            COMMENT_CONTENT_TEXT     = #{commentContentText},
            COMMENT_UPDATE_TIMESTAMP = SYSTIMESTAMP
        WHERE USER_UUID = #{userUuid}
          AND COMMENT_UUID = #{commentUuid}
    </update>

    <delete id="deleteComment">
        UPDATE BOARD_COMMENT
        SET COMMENT_DELETE_YN        = 'Y',
            COMMENT_CONTENT          = '삭제된 댓글입니다.',
            COMMENT_UPDATE_TIMESTAMP = SYSTIMESTAMP,
            USER_UUID                = '00000000-0000-0000-0000-000000000000'
        WHERE USER_UUID = #{userUuid}
          AND COMMENT_UUID = #{commentUuid}
    </delete>

    <select id="getCommentByUuid" resultMap="commentHierarchyMap">
        SELECT *
        FROM BOARD_COMMENT
        WHERE COMMENT_UUID = #{commentUuid}
    </select>

    <select id="getCommentListAjax" resultMap="commentHierarchyMap">
        SELECT * FROM (
        SELECT ROWNUM, a.* FROM (

        SELECT c.*,
        (
        SELECT SUM(DECODE(LIKE_TYPE, 'LIKE', 1, -1)) AS LIKE_SUM
        FROM BOARD_LIKE
        WHERE TARGET_UUID = c.COMMENT_UUID
        ) AS COMMENT_LIKE_COUNT
        <if test="user != null">
            , (
            SELECT LIKE_TYPE
            FROM BOARD_LIKE
            WHERE TARGET_UUID = c.COMMENT_UUID
            AND USER_UUID = #{user.userUuid}
            ) AS COMMENT_USER_LIKE_STATUS
        </if>
        FROM BOARD_COMMENT c
        WHERE c.POST_UUID = #{post.postUuid}
        AND c.COMMENT_PARENT_UUID IS NULL
        <if test="search.order == 'asc'">
            AND c.COMMENT_TIMESTAMP <![CDATA[ >= ]]> TO_TIMESTAMP(#{search.timestamp}, 'YYYY-MM-DD HH24:MI:SS.FF6') +
            INTERVAL '0.000001' SECOND
            ORDER BY c.COMMENT_TIMESTAMP
        </if>
        <if test="search.order == 'desc'">
            AND c.COMMENT_TIMESTAMP <![CDATA[ <= ]]> TO_TIMESTAMP(#{search.timestamp}, 'YYYY-MM-DD HH24:MI:SS.FF6') -
            INTERVAL '0.000001' SECOND
            ORDER BY c.COMMENT_TIMESTAMP DESC
        </if>

        )a ) b WHERE ROWNUM <![CDATA[ <= ]]> 5
    </select>

    <select id="getFirstCommentTimestamp" resultType="String">
        SELECT COMMENT_TIMESTAMP FROM (
        SELECT ROWNUM, a.* FROM (

        SELECT
        <if test="search.order == 'asc'">
            TO_CHAR(COMMENT_TIMESTAMP - INTERVAL '0.000001' SECOND, 'YYYY-MM-DD HH24:MI:SS.FF6') AS COMMENT_TIMESTAMP
        </if>
        <if test="search.order == 'desc'">
            TO_CHAR(COMMENT_TIMESTAMP + INTERVAL '0.000001' SECOND, 'YYYY-MM-DD HH24:MI:SS.FF6') AS COMMENT_TIMESTAMP
        </if>
        FROM BOARD_COMMENT
        WHERE POST_UUID = #{post.postUuid}
        AND COMMENT_PARENT_UUID IS NULL
        <if test="search.order == 'asc'">
            ORDER BY COMMENT_TIMESTAMP
        </if>
        <if test="search.order == 'desc'">
            ORDER BY COMMENT_TIMESTAMP DESC
        </if>

        )a ) b WHERE ROWNUM <![CDATA[ <= ]]> 1
    </select>
</mapper>